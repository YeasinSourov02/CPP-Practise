Worst Fit:
Code:
#include <stdio.h>
#define max 25

int main() {
int frag[max], b[max], f[max], i, j, nb, nf, maxIndex, maxSize;
static int bf[max], ff[max];

// Initialize the bf array to 0
for (i = 0; i < max; i++) {
bf[i] = 0;
}

printf("\n\tMemory Management Scheme - Worst Fit");
printf("\nEnter the number of blocks: ");
scanf("%d", &nb);
printf("Enter the number of files: ");
scanf("%d", &nf);

printf("\nEnter the size of the blocks:\n");

for (i = 0; i < nb; i++) {
printf("Block %d: ", i + 1);
scanf("%d", &b[i]);
}

printf("Enter the size of the files:\n");
for (i = 0; i < nf; i++) {
printf("File %d: ", i + 1);
scanf("%d", &f[i]);
}

for (i = 0; i < nf; i++) {
maxSize = -1; // Reset maxSize for each file
maxIndex = -1; // Reset maxIndex for each file

for (j = 0; j < nb; j++) {
if (bf[j] != 1) { // If block is not allocated
int temp = b[j] - f[i]; // Calculate remaining space
if (temp >= 0 && temp > maxSize) { // Check if it's the largest block that can fit
maxSize = temp; // Update maxSize
maxIndex = j; // Update maxIndex
}
}
}

if (maxIndex != -1) { // If a suitable block was found
ff[i] = maxIndex; // Allocate block
frag[i] = maxSize; // Calculate fragmentation
bf[maxIndex] = 1; // Mark block as allocated

} else {
ff[i] = -1; // No block allocated
frag[i] = -1; // No fragmentation
}
}

printf("\nFile_no:\tFile_size:\tBlock_no:\tBlock_size:\tFragment");
for (i = 0; i < nf; i++) {
if (ff[i] != -1) {
printf("\n%d\t\t%d\t\t%d\t\t%d\t\t%d", i + 1, f[i], ff[i] + 1, b[ff[i]], frag[i]);
} else {
printf("\n%d\t\t%d\t\tNot Allocated", i + 1, f[i]);
}
}

return 0;
}

//

Best Fit:
Code:
#include <stdio.h>
#define max 25

int main() {
int frag[max], b[max], f[max], i, j, nb, nf, temp, lowest;
static int bf[max], ff[max];

// Initialize the bf array to 0
for (i = 0; i < max; i++) {
bf[i] = 0;
}

printf("\nEnter the number of blocks: ");

scanf("%d", &nb);
printf("Enter the number of files: ");
scanf("%d", &nf);

printf("\nEnter the size of the blocks:\n");
for (i = 0; i < nb; i++) {
printf("Block %d: ", i + 1);
scanf("%d", &b[i]);
}

printf("Enter the size of the files:\n");
for (i = 0; i < nf; i++) {
printf("File %d: ", i + 1);
scanf("%d", &f[i]);
}

for (i = 0; i < nf; i++) {
lowest = 10000; // Reset lowest for each file
for (j = 0; j < nb; j++) {
if (bf[j] != 1) { // If block is not allocated
temp = b[j] - f[i]; // Calculate remaining space
if (temp >= 0 && temp < lowest) { // Check for best fit
ff[i] = j; // Allocate block
lowest = temp; // Update lowest
}
}
}
if (lowest != 10000) { // If a suitable block was found
frag[i] = lowest; // Calculate fragmentation

bf[ff[i]] = 1; // Mark block as allocated
} else {
ff[i] = -1; // No block allocated
frag[i] = -1; // No fragmentation
}
}

printf("\nFile No\tFile Size\tBlock No\tBlock Size\tFragment");
for (i = 0; i < nf; i++) {
if (ff[i] != -1) {
printf("\n%d\t\t%d\t\t%d\t\t%d\t\t%d", i + 1, f[i], ff[i] + 1, b[ff[i]], frag[i]);
} else {
printf("\n%d\t\t%d\t\tNot Allocated", i + 1, f[i]);
}
}

return 0;
}


//

First Fit:
Code:
#include <stdio.h>
#define MAX 25

void main() {
int frag[MAX], b[MAX], f[MAX], i, j, nb, nf;
static int bf[MAX], ff[MAX];

printf("\n\tMemory Management Scheme - First Fit");
printf("\nEnter the number of blocks: ");
scanf("%d", &nb);
printf("Enter the number of files: ");
scanf("%d", &nf);

printf("\nEnter the size of the blocks:\n");
for (i = 0; i < nb; i++) {
printf("Block %d: ", i + 1);
scanf("%d", &b[i]);
}

printf("Enter the size of the files:\n");
for (i = 0; i < nf; i++) {
printf("File %d: ", i + 1);
scanf("%d", &f[i]);
}

for (i = 0; i < nf; i++) {
for (j = 0; j < nb; j++) {
if (bf[j] != 1 && b[j] >= f[i]) {
ff[i] = j;
frag[i] = b[j] - f[i];
bf[j] = 1;
break;
}
}
}

printf("\nFile_no:\tFile_size:\tBlock_no:\tBlock_size:\tFragment");
for (i = 0; i < nf; i++) {
if (ff[i] != 0 || b[0] >= f[i]) { // Check if the file was allocated
printf("\n%d\t\t%d\t\t%d\t\t%d\t\t%d",
i + 1,
f[i],
ff[i] + 1,
b[ff[i]],
frag[i]);
} else {
printf("\n%d\t\t%d\t\tNot Allocated", i + 1, f[i]);
}
}
}
