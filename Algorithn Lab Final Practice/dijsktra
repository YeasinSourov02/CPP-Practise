#include <bits/stdc++.h>
using namespace std;

#define INF 1e9

void dijkstra(int V, vector<vector<int>> &matrix, int S) {
    vector<int> dist(V, INF);
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;

    dist[S] = 0;
    pq.push({0, S});

    while (!pq.empty()) {
        int node = pq.top().second;
        int d = pq.top().first;
        pq.pop();

        for (int i = 0; i < V; i++) {
            if (matrix[node][i] > 0 && d + matrix[node][i] < dist[i]) {
                dist[i] = d + matrix[node][i];
                pq.push({dist[i], i});
            }
        }
    }

    cout << "Shortest distances from node " << S << ":\n";
    for (int i = 0; i < V; i++) {
        cout << "To " << i << " = " << dist[i] << "\n";
    }
}

int main() {
    int V, S;
    cout << "Enter number of vertices: ";
    cin >> V;

    vector<vector<int>> matrix(V, vector<int>(V));

    cout << "Enter adjacency matrix:\n";
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            cin >> matrix[i][j];
        }
    }

    cout << "Enter source vertex: ";
    cin >> S;

    dijkstra(V, matrix, S);

    return 0;
}
